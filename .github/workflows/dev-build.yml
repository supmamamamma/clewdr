name: dev-build

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  linux:
    name: Build Linux (GNU)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64
            target_triple: x86_64-unknown-linux-gnu
            apt_packages: ""
            custom_env: {}
          - target: aarch64
            target_triple: aarch64-unknown-linux-gnu
            apt_packages: crossbuild-essential-arm64
            custom_env:
              CFLAGS_aarch64_unknown_linux_gnu: -D__ARM_ARCH=8
              CC: aarch64-linux-gnu-gcc
              CXX: aarch64-linux-gnu-g++
              CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-g++
              RUSTC_LINKER: aarch64-linux-gnu-g++

    steps:
      - uses: actions/checkout@v4

      - name: Install base dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake perl pkg-config libclang-dev musl-tools

      - name: Install target-specific APT dependencies
        if: ${{ matrix.apt_packages != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}

      - name: Add Rust target
        run: rustup target add ${{ matrix.target_triple }}

      - uses: Swatinem/rust-cache@v2

      - name: Build for ${{ matrix.target }}
        env: ${{ matrix.custom_env }}
        run: cargo build --release --target ${{ matrix.target_triple }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-linux-${{ matrix.target }}
          path: target/${{ matrix.target_triple }}/release/clewdr
          retention-days: 1

  android:
    name: Build Android (NDK)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64
            target_triple: aarch64-linux-android
            apt_packages: ""

    steps:
      - uses: actions/checkout@v4
      - uses: nttld/setup-ndk@v1.5.0
        id: setup-ndk
        with:
          ndk-version: r27c
          add-to-path: true

      - name: Install base dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake perl pkg-config libclang-dev musl-tools

      - name: Install target-specific APT dependencies
        if: ${{ matrix.apt_packages != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}

      - name: Add Rust target
        run: rustup target add ${{ matrix.target_triple }}

      - uses: Swatinem/rust-cache@v2

      - name: Build for ${{ matrix.target }}
        run: |
          cargo install cargo-ndk
          cargo ndk --target ${{ matrix.target_triple }} build --release
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-android-${{ matrix.target }}
          path: |
            target/${{ matrix.target_triple }}/release/clewdr
            $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/libc++_shared.so
          retention-days: 1

  musllinux:
    name: Build Linux (musl)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64
            target_triple: x86_64-unknown-linux-musl
            package: x86_64-linux-musl-cross
            apt_packages: ""
            custom_env:
              CC: x86_64-linux-musl-gcc
              CXX: x86_64-linux-musl-g++
              CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: x86_64-linux-musl-g++
              RUSTC_LINKER: x86_64-linux-musl-g++
          - target: aarch64
            target_triple: aarch64-unknown-linux-musl
            package: aarch64-linux-musl-cross
            apt_packages: crossbuild-essential-arm64
            custom_env:
              CC: aarch64-linux-musl-gcc
              CXX: aarch64-linux-musl-g++
              CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-musl-g++
              RUSTC_LINKER: aarch64-linux-musl-g++

    steps:
      - uses: actions/checkout@v4

      - name: Install base dependencies on Ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake perl pkg-config libclang-dev musl-tools

      - name: Install target-specific APT dependencies
        if: ${{ matrix.apt_packages != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.apt_packages }}

      - name: Prepare musl cross-compiler
        run: |
          curl -O http://musl.cc/${{ matrix.package }}.tgz
          tar xzf ${{ matrix.package }}.tgz -C /opt
          echo "/opt/${{ matrix.package }}/bin/" >> $GITHUB_PATH

      - name: Add Rust target
        run: rustup target add ${{ matrix.target_triple }}

      - uses: Swatinem/rust-cache@v2

      - name: Build for ${{ matrix.target }}
        env: ${{ matrix.custom_env }}
        run: cargo build --release --target ${{ matrix.target_triple }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-musllinux-${{ matrix.target }}
          path: target/${{ matrix.target_triple }}/release/clewdr
          retention-days: 1

  windows:
    name: Build Windows
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64
            target_triple: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies on Windows
        run: |
          choco install cmake -y
          choco install strawberryperl -y
          choco install pkgconfiglite -y
          choco install llvm -y
          choco install nasm -y
        shell: cmd

      - uses: Swatinem/rust-cache@v2

      - name: Build on Windows with Static Linking
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: cargo build --release --target ${{ matrix.target_triple }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-windows-${{ matrix.target }}
          path: target/${{ matrix.target_triple }}/release/clewdr.exe
          retention-days: 1

  macos:
    name: Build macOS
    strategy:
      matrix:
        include:
          - target: x86_64
            runner: macos-latest
            target_triple: x86_64-apple-darwin
          - target: aarch64
            runner: macos-latest
            target_triple: aarch64-apple-darwin
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies on macOS
        run: |
          brew update
          brew install --formula cmake pkg-config llvm

      - name: Add Rust target
        run: rustup target add ${{ matrix.target_triple }}

      - uses: Swatinem/rust-cache@v2

      - name: Build for ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target_triple }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: clewdr-macos-${{ matrix.target }}
          path: target/${{ matrix.target_triple }}/release/clewdr
          retention-days: 1
