# .github/workflows/release.yml

name: Build and Release Rust Binary (musl with clang)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # 第一步：安装 Clang, LLD, musl-tools 和其他基础依赖
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          # 安装 clang, lld, musl-tools。移除 g++, musl-dev。保留其他基础依赖。
          sudo apt-get install -y clang lld musl-tools cmake perl pkg-config libclang-dev git build-essential
          rustup target add x86_64-unknown-linux-musl

      # 第二步：缓存 Cargo 依赖项 (更新缓存键)
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # 使用新的 key 以反映 clang 工具链
          key: linux-musl-clang-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      # 第三步：配置 Cargo 使用 Clang 进行 musl 构建
      - name: Configure Cargo for musl build with clang
        run: |
          mkdir -p .cargo
          cat <<EOF > .cargo/config.toml
          # 针对 x86_64-unknown-linux-musl target 的配置
          [target.x86_64-unknown-linux-musl]
          # 使用 clang 作为链接器
          linker = "clang"
          # 设置传递给链接器的 rustflags
          rustflags = [
              # 明确告诉 clang/lld 目标是 musl
              "-C", "link-arg=--target=x86_64-unknown-linux-musl",
              # 使用 lld 作为链接器后端
              "-C", "link-arg=-fuse-ld=lld",
              # 请求静态链接标准库
              "-C", "link-arg=-static",
              # 确保 CRT 是静态链接的 (对 musl target 通常是默认但明确指定无害)
              "-C", "target-feature=+crt-static",
          ]

          # 通过 [env] 设置环境变量，供 build scripts (如 cc-rs, cmake-rs) 使用
          [env]
          # 指定 musl target 的 C 编译器为 clang，并传递 target 参数
          CC_x86_64-unknown-linux-musl = "clang"
          CFLAGS_x86_64-unknown-linux-musl = "--target=x86_64-unknown-linux-musl"

          # 指定 musl target 的 C++ 编译器为 clang++，并传递 target 参数
          CXX_x86_64-unknown-linux-musl = "clang++"
          CXXFLAGS_x86_64-unknown-linux-musl = "--target=x86_64-unknown-linux-musl"

          # 指定 musl target 的 Archiver 为 llvm-ar
          AR_x86_64-unknown-linux-musl = "llvm-ar"

          # 确保 Cargo 也知道链接器 (虽然上面 target.linker 已设置，冗余无害)
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER = "clang"
          EOF
          echo "Created .cargo/config.toml:"
          cat .cargo/config.toml

      # 第四步：构建项目
      - name: Build Project
        # 环境变量和 RUSTFLAGS 现在由 .cargo/config.toml 提供
        run: cargo build --release --locked --target x86_64-unknown-linux-musl --verbose

      # 第五步：准备 Release 资源 (保持不变)
      - name: Prepare Release Asset
        id: prepare_asset
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F / '{print $2}')
          TAG_NAME="${{ github.ref_name }}"
          TARGET_ARCH="x86_64"
          TARGET_OS="linux-musl"
          SOURCE_BINARY_PATH_DIR="./target/x86_64-unknown-linux-musl/release"

          SOURCE_BINARY_PATH=$(find "$SOURCE_BINARY_PATH_DIR" -maxdepth 1 -type f -executable -not -name '*.*' | head -n 1)

          if [ -z "$SOURCE_BINARY_PATH" ]; then
            FALLBACK_PATH="$SOURCE_BINARY_PATH_DIR/$REPO_NAME"
            if [ -f "$FALLBACK_PATH" ]; then
              SOURCE_BINARY_PATH="$FALLBACK_PATH"
              echo "Could not auto-detect binary, using fallback: $SOURCE_BINARY_PATH"
            else
              echo "Error: Could not find the executable binary in $SOURCE_BINARY_PATH_DIR/"
              echo "Please ensure your binary name is conventional or adjust the script."
              exit 1
            fi
          else
            echo "Found binary: $SOURCE_BINARY_PATH"
          fi

          ASSET_NAME="${REPO_NAME}-${TAG_NAME}-${TARGET_ARCH}-${TARGET_OS}"
          mkdir ./staging
          cp "$SOURCE_BINARY_PATH" "./staging/${ASSET_NAME}"

          echo "asset_path=./staging/${ASSET_NAME}" >> $GITHUB_OUTPUT
          echo "asset_name=${ASSET_NAME}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${TAG_NAME}" >> $GITHUB_OUTPUT
          # 更新 body 以反映使用了 clang
          echo "body=Automatic release for tag ${TAG_NAME}. See CHANGELOG.md for details. (Linux binary is statically linked using musl via clang)" >> $GITHUB_OUTPUT

      # 第六步：创建 GitHub Release 并上传资源 (保持不变)
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prepare_asset.outputs.tag_name }}
          name: ${{ steps.prepare_asset.outputs.release_name }}
          body: ${{ steps.prepare_asset.outputs.body }}
          files: ${{ steps.prepare_asset.outputs.asset_path }}
